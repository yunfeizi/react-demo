name: Push to Another Repository

on:
  push:
    branches:
      - main

permissions:
  contents: read  # 允许 checkout 操作

jobs:
  push:
    runs-on: ubuntu-latest
    steps:
      # 1. 检出源代码
      - name: Checkout source code
        uses: actions/checkout@v4
        
      # 2. 配置 Git 用户信息（可选）
      - name: Set Git user
        run: |
          git config --global user.name "zhoudq"
          git config --global user.email "zhoudq@cn.ibm.com"

      # 3. 调试：打印 secrets 的值（仅用于本地测试，实际运行时会被隐藏）
      - name: Debug Secrets (仅用于本地测试)
        run: |
          echo "TARGET_REPO_TOKEN: ${{ secrets.TARGET_REPO_TOKEN }}"
          echo "TARGET_REPO_OWNER: ${{ secrets.TARGET_REPO_OWNER }}"
          echo "TARGET_REPO_NAME: ${{ secrets.TARGET_REPO_NAME }}"
        if: false  # 确保此步骤不会在实际运行时执行

      # 4. 测试 PAT 是否有效（通过 GitHub API）
      - name: Test PAT (API)
        id: test_pat
        run: |
          curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token ${{ secrets.TARGET_REPO_TOKEN }}" \
            https://api.github.com/repos/${{ secrets.TARGET_REPO_OWNER }}/${{ secrets.TARGET_REPO_NAME }}
        continue-on-error: true  # 即使失败也继续执行后续步骤

      # 5. 输出 API 测试结果
      - name: Display API Test Result
        run: |
          echo "API Test HTTP Status Code: ${{ steps.test_pat.outputs.http_code }}"
        env:
          HTTP_CODE: ${{ steps.test_pat.outputs.http_code }}
        # 注意：actions/checkout@v4 不支持直接捕获输出为环境变量，需要通过其他方式
        # 可以改用以下方法捕获输出：
      - name: Capture API Test Result
        id: capture_result
        run: |
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token ${{ secrets.TARGET_REPO_TOKEN }}" \
            https://api.github.com/repos/${{ secrets.TARGET_REPO_OWNER }}/${{ secrets.TARGET_REPO_NAME }})
          echo "::set-output name=http_code::$HTTP_CODE"

      - name: Display Captured API Test Result
        run: |
          echo "API Test HTTP Status Code: ${{ steps.capture_result.outputs.http_code }}"

      # 6. 添加目标仓库为远程仓库（使用 HTTPS + PAT）
      - name: Add target repository as remote
        env:
          TARGET_REPO_TOKEN: ${{ secrets.TARGET_REPO_TOKEN }}
          TARGET_REPO_OWNER: ${{ secrets.TARGET_REPO_OWNER }}
          TARGET_REPO_NAME: ${{ secrets.TARGET_REPO_NAME }}
        run: |
          # 确保 Token 正确嵌入 URL
          REMOTE_URL="https://${TARGET_REPO_TOKEN}@github.com/${TARGET_REPO_OWNER}/${TARGET_REPO_NAME}.git"
          echo "Adding remote target with URL: $REMOTE_URL"
          git remote add target "$REMOTE_URL"

      # 7. 推送代码到目标仓库
      - name: Push to target repository
        env:
          TARGET_REPO_TOKEN: ${{ secrets.TARGET_REPO_TOKEN }}
          TARGET_REPO_OWNER: ${{ secrets.TARGET_REPO_OWNER }}
          TARGET_REPO_NAME: ${{ secrets.TARGET_REPO_NAME }}
        run: |
          REMOTE_URL="https://${TARGET_REPO_TOKEN}@github.com/${TARGET_REPO_OWNER}/${TARGET_REPO_NAME}.git"
          echo "Attempting to push to remote: $REMOTE_URL"
          git push target main || {
            echo "Push failed. Debug info:";
            git remote -v;
            # 获取更详细的错误信息
            GIT_TRACE=1 GIT_CURL_VERBOSE=1 git push target main 2>&1 | tee git_push_debug.log;
            exit 1;
          }